1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "metrics-accumulator.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "metrics-accumulator.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "metrics-accumulator.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "metrics-accumulator.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. To push metrics to metrics-accumulator, use the following example:
   curl -X POST http://your-metrics-accumulator-url/api/v1/metrics \
     -H "Content-Type: application/json" \
     -d '{
       "hostname": "lambda-host",
       "endpoint": "my_lambda_function", 
       "request_method": "POST",
       "status_code": 200,
       "pid": 1234,
       "value": 0.045
     }'

3. To view accumulated metrics in Prometheus format:
   curl http://your-metrics-accumulator-url/metrics

4. Configure Prometheus to scrape metrics from:
   - Target: {{ include "metrics-accumulator.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}
   - Path: /metrics
   - Remember to set honor_labels: true in your Prometheus scrape config

{{- if .Values.serviceMonitor.enabled }}
5. A ServiceMonitor has been created for Prometheus Operator integration.
{{- end }}

{{- if .Values.persistence.enabled }}
6. Persistent storage is enabled. Metrics will be persisted across pod restarts.
{{- end }} 